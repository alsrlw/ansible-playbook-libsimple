# -*- mode: ruby -*-
# vi: set ft=ruby :

# Load YAML module to parse variables from Ansible .yml file
require 'yaml'
settings = YAML.load_file 'vars/virtualbox_multi_vars.yml'

Vagrant.configure(2) do |config|
  config.vm.define settings['cm_machine_label'], primary: true, autostart: settings['cm_autostart'] do |cm|
    cm.vm.box = "centos/7"

    # Create a forwarded port mapping which allows access to the application port
    # within the machine from a port on the host machine.
    cm.vm.network "forwarded_port", guest: 80, host: settings['cm_host_port']

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # cm.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # cm.vm.network "public_network"

    # Add: From v.0.7.1, can add a custom host name to machine if desired
    # We'll give the machine/host the same name as the internal Vagrant box name
    cm.vm.host_name = settings['cm_host_name']

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # Sample:
    # cm.vm.synced_folder "[path]/data", "/vagrant_data"
    cm.vm.synced_folder ".", "/vagrant", disabled: true

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    cm.vm.provider "virtualbox" do |vb1|
      # Display the VirtualBox GUI when booting the machine
      # vb1.gui = true
      #
      # Customize the amount of memory on the VM:
      vb1.memory = settings['cm_memory_allocation']
      # Provide a more specific VB Manager name for the box
      vb1.name = settings['cm_vm_name']
    end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
      
    # Ansible provisioning
      
    cm.vm.provision "confighost-cm", type: "ansible" do |ansible1|
      ansible1.verbose = "vv"
      ansible1.playbook = "configure-host.yml"
      ansible1.extra_vars = {
        vm_environment: "virtualbox_multi"
      }
    end
   
    cm.vm.provision "loadservices-cm", type: "ansible" do |ansible2|
      ansible2.verbose = "vv"
      ansible2.playbook = "provision-vagrant.yml"
      ansible2.extra_vars = {
        vm_environment: "virtualbox_multi",
        vm_type: "cm"
      }
    end
  end

  config.vm.define settings['webclient_machine_label'], autostart: settings['webclient_autostart'] do |webclient|
    webclient.vm.box = "centos/7"

    # Create a forwarded port mapping which allows access to the application port
    # within the machine from a port on the host machine.
    webclient.vm.network "forwarded_port", guest: 80, host: settings['webclient_host_port']

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # webclient.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # webclient.vm.network "public_network"

    # Add: From v.0.7.1, can add a custom host name to machine if desired
    # We'll give the machine/host the same name as the internal Vagrant box name
    webclient.vm.host_name = settings['webclient_host_name']

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # webclient.vm.synced_folder "../data", "/vagrant_data"
    webclient.vm.synced_folder ".", "/vagrant", disabled: true

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    webclient.vm.provider "virtualbox" do |vb2|
      # Display the VirtualBox GUI when booting the machine
      # vb2.gui = true
      #
      # Customize the amount of memory on the VM:
      vb2.memory = settings['webclient_memory_allocation']
      # Provide a more specific VB Manager name for the box
      vb2.name = settings['webclient_vm_name']
    end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
      
    # Ansible provisioning
      
    webclient.vm.provision "confighost-wc", type: "ansible" do |ansible3|
      ansible3.verbose = "vv"
      ansible3.playbook = "configure-host.yml"
      ansible3.extra_vars = {
        vm_environment: "virtualbox_multi"
      }
    end
   
    webclient.vm.provision "loadservices-wc", type: "ansible" do |ansible4|
      ansible4.verbose = "vv"
      ansible4.playbook = "provision-vagrant.yml"
      ansible4.extra_vars = {
        vm_environment: "virtualbox_multi",
        vm_type: "webclient"
      }
    end
  end

end
