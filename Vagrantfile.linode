# -*- mode: ruby -*-
# vi: set ft=ruby :

# Load YAML module to parse variables from Ansible .yml file
require 'yaml'
settings = YAML.load_file 'vars/linode_vars.yml'

Vagrant.configure(2) do |config|
  
  config.vm.box = "centos/7"

  # Add: Define a specific box/machine name within Vagrant
  config.vm.define "scmv2test1"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  
#  config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Add: From v.0.7.1, can add a custom host name to machine if desired
  # We'll give the machine/host the same name as the internal Vagrant box name
  config.vm.host_name = "scmv2test1"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.

  # Provider-specific configuration for Linode
  config.vm.provider :linode do |provider, override|
    override.ssh.private_key_path = "~/.ssh/" + settings['admin_ssh_keyname']
    override.vm.box = settings['distribution_id']
    override.vm.box_url = "https://github.com/displague/vagrant-linode/raw/master/box/linode.box"

    provider.token = settings['linode_api_key']
    provider.distribution = settings['distribution_name']
    provider.datacenter = settings['datacenter_id']
    provider.plan = settings['plan_id']
    provider.label = settings['linode_name']
    # Main Disk Image Size (string): ( Full Allocation - Swap ) if missing
    provider.xvda_size = settings['primary_disk_size']
    # Swap Image Size (string): 256MB if missing
    provider.swap_size = settings['swap_size']

    # provider.planid = 1
    # provider.paymentterm = <*1*,12,24>
    # provider.datacenterid = 2
    # provider.image = 
    # provider.imageid = 
    # provider.kernel = 
    # provider.kernelid = 
    # provider.private_networking = 
    # provider.stackscript =  # Not Supported Yet
    # provider.stackscriptid =  # Not Supported Yet
    # provider.distributionid = 
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.
  
  # Ansible provisioners to add base utilities and users, then install SCM services
  
   config.vm.provision "confighost", type: "ansible" do |ansible1|
    ansible1.verbose = "vv"
    ansible1.playbook = "linode-configure.yml"
   end
   
   config.vm.provision "loadservices", type: "ansible" do |ansible2|
    ansible2.verbose = "vv"
    ansible2.playbook = "provision-vagrant.yml"
   end

  # Shell provisioner to create admin user .ssh directory
  DirName = "/home/" + settings['admin_username'] + "/.ssh"
  config.vm.provision "shell", inline: "mkdir " + DirName
  
  # File provisioner to copy public key for admin user
  config.vm.provision "file", source: "~/.ssh/" + settings['admin_ssh_keyname'] + ".pub", destination: DirName + "/authorized_keys"
  
end
